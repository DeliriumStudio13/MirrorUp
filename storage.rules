rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to get user data from Firestore
    function getUserData(userId) {
      return firestore.get(/databases/(default)/documents/users/$(userId)).data;
    }
    
    function getBusinessId(userId) {
      return getUserData(userId).businessId;
    }
    
    function hasRole(userId, roles) {
      return getUserData(userId).role in roles;
    }
    
    function belongsToSameBusiness(userId, businessId) {
      return getBusinessId(userId) == businessId;
    }
    
    // Business logos and branding assets
    match /businesses/{businessId}/assets/{allPaths=**} {
      allow read: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, businessId);
      
      allow write: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, businessId) &&
        hasRole(request.auth.uid, ['admin']) &&
        request.resource.size < 5 * 1024 * 1024 && // 5MB limit
        request.resource.contentType.matches('image/.*');
    }
    
    // User profile pictures
    match /users/{userId}/avatar {
      allow read: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, getBusinessId(userId));
      
      allow write: if request.auth != null && 
        (request.auth.uid == userId || hasRole(request.auth.uid, ['admin', 'hr'])) &&
        belongsToSameBusiness(request.auth.uid, getBusinessId(userId)) &&
        request.resource.size < 2 * 1024 * 1024 && // 2MB limit
        request.resource.contentType.matches('image/.*');
    }
    
    // Evaluation attachments
    match /businesses/{businessId}/evaluations/{evaluationId}/attachments/{fileName} {
      allow read: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, businessId);
      
      allow write: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, businessId) &&
        hasRole(request.auth.uid, ['admin', 'hr', 'manager']) &&
        request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Document templates
    match /businesses/{businessId}/templates/{templateId}/{fileName} {
      allow read: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, businessId);
      
      allow write: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, businessId) &&
        hasRole(request.auth.uid, ['admin', 'hr']) &&
        request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Reports and exports
    match /businesses/{businessId}/reports/{fileName} {
      allow read: if request.auth != null && 
        belongsToSameBusiness(request.auth.uid, businessId) &&
        hasRole(request.auth.uid, ['admin', 'hr']);
      
      allow write: if false; // Only Cloud Functions can write reports
    }
    
    // Temporary uploads
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB limit
        // Delete after 24 hours (handled by Cloud Function)
        request.time < resource.timeCreated + duration.value(24, 'h');
    }
  }
}
